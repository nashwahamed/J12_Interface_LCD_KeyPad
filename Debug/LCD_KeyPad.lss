
LCD_KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000606  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000606  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012d6  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b7  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a6  00000000  00000000  00002365  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00002c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000819  00000000  00000000  00003229  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003a42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f6 02 	call	0x5ec	; 0x5ec <main>
  7a:	0c 94 01 03 	jmp	0x602	; 0x602 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDir>:

			break;

		case DIO_PORTD :

			*Val = PIND;
  82:	44 23       	and	r20, r20
  84:	b9 f1       	breq	.+110    	; 0xf4 <DIO_SetPinDir+0x72>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	09 f0       	breq	.+2      	; 0x8c <DIO_SetPinDir+0xa>
  8a:	6b c0       	rjmp	.+214    	; 0x162 <DIO_SetPinDir+0xe0>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_SetPinDir+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPinDir+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_SetPinDir+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_SetPinDir+0x5c>
  9a:	08 95       	ret
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPinDir+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPinDir+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_SetPinDir+0x9a>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_SetPinDir+0x82>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_SetPinDir+0xb2>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_SetPinDir+0xca>
 102:	08 95       	ret
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDir+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDir+0x8a>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0xa2>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDir+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDir+0xd2>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_WritePin>:
 164:	44 23       	and	r20, r20
 166:	b9 f1       	breq	.+110    	; 0x1d6 <DIO_WritePin+0x72>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <DIO_WritePin+0xa>
 16c:	6b c0       	rjmp	.+214    	; 0x244 <DIO_WritePin+0xe0>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_WritePin+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_WritePin+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_WritePin+0x46>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_WritePin+0x5c>
 17c:	08 95       	ret
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_WritePin+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_WritePin+0x22>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
 194:	28 b3       	in	r18, 0x18	; 24
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_WritePin+0x3c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_WritePin+0x38>
 1a4:	82 2b       	or	r24, r18
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	08 95       	ret
 1aa:	25 b3       	in	r18, 0x15	; 21
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_WritePin+0x52>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_WritePin+0x4e>
 1ba:	82 2b       	or	r24, r18
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	08 95       	ret
 1c0:	22 b3       	in	r18, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_WritePin+0x68>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_WritePin+0x64>
 1d0:	82 2b       	or	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	08 95       	ret
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_WritePin+0x9a>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_WritePin+0x82>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_WritePin+0xb2>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_WritePin+0xca>
 1e4:	08 95       	ret
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_WritePin+0x8e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_WritePin+0x8a>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	08 95       	ret
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_WritePin+0xa6>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_WritePin+0xa2>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_WritePin+0xbe>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_WritePin+0xba>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	08 95       	ret
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_WritePin+0xd6>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_WritePin+0xd2>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <DIO_ReadPin>:



void DIO_ReadPin (uint8 Port ,uint8 Pin, uint8* Val)
{
	switch (Port)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	89 f0       	breq	.+34     	; 0x26c <DIO_ReadPin+0x26>
 24a:	28 f0       	brcs	.+10     	; 0x256 <DIO_ReadPin+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	c9 f0       	breq	.+50     	; 0x282 <DIO_ReadPin+0x3c>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	11 f1       	breq	.+68     	; 0x298 <DIO_ReadPin+0x52>
 254:	08 95       	ret
			{
			case DIO_PORTA :

				*Val =  GET_BIT(PINA,Pin);
 256:	89 b3       	in	r24, 0x19	; 25
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_ReadPin+0x1a>
 25c:	95 95       	asr	r25
 25e:	87 95       	ror	r24
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_ReadPin+0x16>
 264:	81 70       	andi	r24, 0x01	; 1
 266:	fa 01       	movw	r30, r20
 268:	80 83       	st	Z, r24

				break;
 26a:	08 95       	ret

			case DIO_PORTB :

				*Val = GET_BIT(PINB,Pin);
 26c:	86 b3       	in	r24, 0x16	; 22
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_ReadPin+0x30>
 272:	95 95       	asr	r25
 274:	87 95       	ror	r24
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_ReadPin+0x2c>
 27a:	81 70       	andi	r24, 0x01	; 1
 27c:	fa 01       	movw	r30, r20
 27e:	80 83       	st	Z, r24

				break;
 280:	08 95       	ret

			case DIO_PORTC :

				*Val = GET_BIT(PINC,Pin);
 282:	83 b3       	in	r24, 0x13	; 19
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_ReadPin+0x46>
 288:	95 95       	asr	r25
 28a:	87 95       	ror	r24
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_ReadPin+0x42>
 290:	81 70       	andi	r24, 0x01	; 1
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24

				break;
 296:	08 95       	ret

			case DIO_PORTD :

				*Val = GET_BIT(PIND,Pin);
 298:	80 b3       	in	r24, 0x10	; 16
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_ReadPin+0x5c>
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_ReadPin+0x58>
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	fa 01       	movw	r30, r20
 2aa:	80 83       	st	Z, r24
 2ac:	08 95       	ret

000002ae <DIO_SetPullUp>:



void DIO_SetPullUp(uint8 Port ,uint8 Pin )
{
	switch(Port)
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	89 f0       	breq	.+34     	; 0x2d4 <DIO_SetPullUp+0x26>
 2b2:	28 f0       	brcs	.+10     	; 0x2be <DIO_SetPullUp+0x10>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	c9 f0       	breq	.+50     	; 0x2ea <DIO_SetPullUp+0x3c>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	11 f1       	breq	.+68     	; 0x300 <DIO_SetPullUp+0x52>
 2bc:	08 95       	ret
	{

		case DIO_PORTA :

		SET_BIT(PORTA,Pin);
 2be:	2b b3       	in	r18, 0x1b	; 27
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_SetPullUp+0x1c>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_SetPullUp+0x18>
 2ce:	82 2b       	or	r24, r18
 2d0:	8b bb       	out	0x1b, r24	; 27

		break;
 2d2:	08 95       	ret

		case DIO_PORTB :

		SET_BIT(PORTB,Pin);
 2d4:	28 b3       	in	r18, 0x18	; 24
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_SetPullUp+0x32>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_SetPullUp+0x2e>
 2e4:	82 2b       	or	r24, r18
 2e6:	88 bb       	out	0x18, r24	; 24

		break;
 2e8:	08 95       	ret

		case DIO_PORTC :

		SET_BIT(PORTC,Pin);
 2ea:	25 b3       	in	r18, 0x15	; 21
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPullUp+0x48>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPullUp+0x44>
 2fa:	82 2b       	or	r24, r18
 2fc:	85 bb       	out	0x15, r24	; 21

		break;
 2fe:	08 95       	ret

		case DIO_PORTD :

		SET_BIT(PORTD,Pin);
 300:	22 b3       	in	r18, 0x12	; 18
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_SetPullUp+0x5e>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_SetPullUp+0x5a>
 310:	82 2b       	or	r24, r18
 312:	82 bb       	out	0x12, r24	; 18
 314:	08 95       	ret

00000316 <KeyPad_Init>:
											  
											  
										  
void KeyPad_Init(void)
{
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_0, DIO_PIN_OUTPUT);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_1, DIO_PIN_OUTPUT);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_2, DIO_PIN_OUTPUT);
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_3, DIO_PIN_OUTPUT);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_0, DIO_PIN_INPUT);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_1, DIO_PIN_INPUT);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	65 e0       	ldi	r22, 0x05	; 5
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
    DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_2, DIO_PIN_INPUT);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	66 e0       	ldi	r22, 0x06	; 6
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_3, DIO_PIN_INPUT);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	67 e0       	ldi	r22, 0x07	; 7
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
	
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_0 );
 366:	64 e0       	ldi	r22, 0x04	; 4
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_1 );
 36e:	65 e0       	ldi	r22, 0x05	; 5
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_2 );
 376:	66 e0       	ldi	r22, 0x06	; 6
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_3 );
 37e:	67 e0       	ldi	r22, 0x07	; 7
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_SetPullUp>
	
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_0, DIO_PIN_HIGH);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_1, DIO_PIN_HIGH);
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_2, DIO_PIN_HIGH);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_3, DIO_PIN_HIGH);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 3ae:	08 95       	ret

000003b0 <KeyPad_GetValue>:
	
}

uint8 KeyPad_GetValue(void)
{
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	1f 92       	push	r1
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	
	uint8 LOC_ROW = 0;
	
	uint8 Value = 0;
	
	uint8 Temp = 0;
 3c8:	19 82       	std	Y+1, r1	; 0x01
 3ca:	0f 2e       	mov	r0, r31
 3cc:	f0 e6       	ldi	r31, 0x60	; 96
 3ce:	cf 2e       	mov	r12, r31
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	df 2e       	mov	r13, r31
 3d4:	f0 2d       	mov	r31, r0
	
	uint8 LOC_Coloum = 0;
	
	uint8 LOC_ROW = 0;
	
	uint8 Value = 0;
 3d6:	b1 2c       	mov	r11, r1
	
	uint8 Temp = 0;
	
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
 3d8:	00 e0       	ldi	r16, 0x00	; 0
	{
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_LOW);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	60 2f       	mov	r22, r16
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 3e4:	76 01       	movw	r14, r12
		
		for(LOC_ROW = ROW_INIT ; LOC_ROW <= ROW_FINAL ; LOC_ROW++)
 3e6:	14 e0       	ldi	r17, 0x04	; 4
		{
			
			DIO_ReadPin (KEYPAD_PORT ,LOC_ROW , &Temp);
 3e8:	ae 01       	movw	r20, r28
 3ea:	4f 5f       	subi	r20, 0xFF	; 255
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	61 2f       	mov	r22, r17
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	0e 94 23 01 	call	0x246	; 0x246 <DIO_ReadPin>
			
			if(!Temp)
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	81 11       	cpse	r24, r1
 3fa:	12 c0       	rjmp	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{
				Value = KeyPad_Vlues[LOC_ROW - ROW_INIT][LOC_Coloum - COL_INIT];
 3fc:	f7 01       	movw	r30, r14
 3fe:	b0 80       	ld	r11, Z
				
				while(!Temp)
				{
					DIO_ReadPin (KEYPAD_PORT ,LOC_ROW , &Temp);
 400:	ae 01       	movw	r20, r28
 402:	4f 5f       	subi	r20, 0xFF	; 255
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	61 2f       	mov	r22, r17
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	0e 94 23 01 	call	0x246	; 0x246 <DIO_ReadPin>
			
			if(!Temp)
			{
				Value = KeyPad_Vlues[LOC_ROW - ROW_INIT][LOC_Coloum - COL_INIT];
				
				while(!Temp)
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	88 23       	and	r24, r24
 412:	b1 f3       	breq	.-20     	; 0x400 <__LOCK_REGION_LENGTH__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 414:	8f e3       	ldi	r24, 0x3F	; 63
 416:	9c e9       	ldi	r25, 0x9C	; 156
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
	{
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_LOW);
		
		for(LOC_ROW = ROW_INIT ; LOC_ROW <= ROW_FINAL ; LOC_ROW++)
 420:	1f 5f       	subi	r17, 0xFF	; 255
 422:	94 e0       	ldi	r25, 0x04	; 4
 424:	e9 0e       	add	r14, r25
 426:	f1 1c       	adc	r15, r1
 428:	18 30       	cpi	r17, 0x08	; 8
 42a:	f1 f6       	brne	.-68     	; 0x3e8 <KeyPad_GetValue+0x38>
				_delay_ms(10);
			}		
			
		}
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_HIGH);
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	60 2f       	mov	r22, r16
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	
	uint8 Value = 0;
	
	uint8 Temp = 0;
	
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
 436:	0f 5f       	subi	r16, 0xFF	; 255
 438:	ef ef       	ldi	r30, 0xFF	; 255
 43a:	ce 1a       	sub	r12, r30
 43c:	de 0a       	sbc	r13, r30
 43e:	04 30       	cpi	r16, 0x04	; 4
 440:	61 f6       	brne	.-104    	; 0x3da <KeyPad_GetValue+0x2a>
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_HIGH);
	}
	
	return Value ;
	
 442:	8b 2d       	mov	r24, r11
 444:	0f 90       	pop	r0
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	df 90       	pop	r13
 454:	cf 90       	pop	r12
 456:	bf 90       	pop	r11
 458:	08 95       	ret

0000045a <LCD_WriteCommand>:
#endif
	
}

void LCD_WriteCommand(uint8 cmd)
{
 45a:	cf 93       	push	r28
 45c:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_LOW);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	63 e0       	ldi	r22, 0x03	; 3
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 47c:	8b b3       	in	r24, 0x1b	; 27
 47e:	9c 2f       	mov	r25, r28
 480:	90 7f       	andi	r25, 0xF0	; 240
 482:	8f 70       	andi	r24, 0x0F	; 15
 484:	89 2b       	or	r24, r25
 486:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	63 e0       	ldi	r22, 0x03	; 3
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 492:	8f e9       	ldi	r24, 0x9F	; 159
 494:	9f e0       	ldi	r25, 0x0F	; 15
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_WriteCommand+0x3c>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_WriteCommand+0x42>
 49c:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	
	PORTA = (cmd << 4) | (PORTA & 0x0F);
 4a8:	2b b3       	in	r18, 0x1b	; 27
 4aa:	30 e1       	ldi	r19, 0x10	; 16
 4ac:	c3 9f       	mul	r28, r19
 4ae:	c0 01       	movw	r24, r0
 4b0:	11 24       	eor	r1, r1
 4b2:	92 2f       	mov	r25, r18
 4b4:	9f 70       	andi	r25, 0x0F	; 15
 4b6:	89 2b       	or	r24, r25
 4b8:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	63 e0       	ldi	r22, 0x03	; 3
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 4c4:	8f e9       	ldi	r24, 0x9F	; 159
 4c6:	9f e0       	ldi	r25, 0x0F	; 15
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LCD_WriteCommand+0x6e>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LCD_WriteCommand+0x74>
 4ce:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	63 e0       	ldi	r22, 0x03	; 3
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 4da:	8f e1       	ldi	r24, 0x1F	; 31
 4dc:	9e e4       	ldi	r25, 0x4E	; 78
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_WriteCommand+0x84>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <LCD_WriteCommand+0x8a>
 4e4:	00 00       	nop
	
	_delay_ms(5);
	
}
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <LCD_Init>:
	
	_delay_ms(5);
	
	#elif LCD_MODE == 4
	
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RS_PIN , DIO_PIN_OUTPUT);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RW_PIN , DIO_PIN_OUTPUT);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	62 e0       	ldi	r22, 0x02	; 2
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_E_PIN , DIO_PIN_OUTPUT);
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
		
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D4 , DIO_PIN_OUTPUT);
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	64 e0       	ldi	r22, 0x04	; 4
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D5 , DIO_PIN_OUTPUT);
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	65 e0       	ldi	r22, 0x05	; 5
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D6 , DIO_PIN_OUTPUT);
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	66 e0       	ldi	r22, 0x06	; 6
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D7 , DIO_PIN_OUTPUT);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	67 e0       	ldi	r22, 0x07	; 7
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	81 ee       	ldi	r24, 0xE1	; 225
 534:	94 e0       	ldi	r25, 0x04	; 4
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <LCD_Init+0x4c>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_Init+0x56>
 540:	00 00       	nop
		
		_delay_ms(100);
		
		LCD_WriteCommand(0x33);
 542:	83 e3       	ldi	r24, 0x33	; 51
 544:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WriteCommand>
		LCD_WriteCommand(0x32);
 548:	82 e3       	ldi	r24, 0x32	; 50
 54a:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WriteCommand>
		LCD_WriteCommand(0x28);
 54e:	88 e2       	ldi	r24, 0x28	; 40
 550:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WriteCommand>
		LCD_WriteCommand(0x0C);
 554:	8c e0       	ldi	r24, 0x0C	; 12
 556:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WriteCommand>
        LCD_WriteCommand(0x01);
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WriteCommand>
		LCD_WriteCommand(0x06);
 560:	86 e0       	ldi	r24, 0x06	; 6
 562:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WriteCommand>
		LCD_WriteCommand(0x02);
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WriteCommand>
 56c:	08 95       	ret

0000056e <LCD_WriteChar>:
	
}


void LCD_WriteChar(uint8 data)
{
 56e:	cf 93       	push	r28
 570:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_HIGH);
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	62 e0       	ldi	r22, 0x02	; 2
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	63 e0       	ldi	r22, 0x03	; 3
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	
	PORTA = (data & 0xF0) ;
 590:	8c 2f       	mov	r24, r28
 592:	80 7f       	andi	r24, 0xF0	; 240
 594:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	63 e0       	ldi	r22, 0x03	; 3
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 5a0:	8f e9       	ldi	r24, 0x9F	; 159
 5a2:	9f e0       	ldi	r25, 0x0F	; 15
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <LCD_WriteChar+0x36>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <LCD_WriteChar+0x3c>
 5aa:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
	
	PORTA = (data << 4) ;
 5b6:	c2 95       	swap	r28
 5b8:	c0 7f       	andi	r28, 0xF0	; 240
 5ba:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	63 e0       	ldi	r22, 0x03	; 3
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 5c6:	8f e9       	ldi	r24, 0x9F	; 159
 5c8:	9f e0       	ldi	r25, 0x0F	; 15
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_WriteChar+0x5c>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <LCD_WriteChar+0x62>
 5d0:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	63 e0       	ldi	r22, 0x03	; 3
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_WritePin>
 5dc:	8f e1       	ldi	r24, 0x1F	; 31
 5de:	9e e4       	ldi	r25, 0x4E	; 78
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <LCD_WriteChar+0x72>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <LCD_WriteChar+0x78>
 5e6:	00 00       	nop
	
	_delay_ms(5);
}
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <main>:
int main(void)
{
    /* Replace with your application code */
   uint8 value = 0;
   
   LCD_Init();
 5ec:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_Init>
   KeyPad_Init();
 5f0:	0e 94 8b 01 	call	0x316	; 0x316 <KeyPad_Init>
   
   
   while (1)
   {
	   value = KeyPad_GetValue();
 5f4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <KeyPad_GetValue>
	   
	   if(value)
 5f8:	88 23       	and	r24, r24
 5fa:	e1 f3       	breq	.-8      	; 0x5f4 <main+0x8>
	   {
		   LCD_WriteChar(value);
 5fc:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_WriteChar>
 600:	f9 cf       	rjmp	.-14     	; 0x5f4 <main+0x8>

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
